// Code generated by MockGen. DO NOT EDIT.
// Source: api/api.go
//
// Generated by this command:
//
//	mockgen -source=api/api.go -destination=db/mock_db.go -package=db
//

// Package db is a generated GoMock package.
package db

import (
	context "context"
	reflect "reflect"

	model "github.com/ingtk/MaruBatsuGame/api/model"
	echo "github.com/labstack/echo/v4"
	gomock "go.uber.org/mock/gomock"
)

// MockDatabase is a mock of Database interface.
type MockDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseMockRecorder
}

// MockDatabaseMockRecorder is the mock recorder for MockDatabase.
type MockDatabaseMockRecorder struct {
	mock *MockDatabase
}

// NewMockDatabase creates a new mock instance.
func NewMockDatabase(ctrl *gomock.Controller) *MockDatabase {
	mock := &MockDatabase{ctrl: ctrl}
	mock.recorder = &MockDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabase) EXPECT() *MockDatabaseMockRecorder {
	return m.recorder
}

// GetGameByID mocks base method.
func (m *MockDatabase) GetGameByID(ctx context.Context, gameID string) (*model.Game, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGameByID", ctx, gameID)
	ret0, _ := ret[0].(*model.Game)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGameByID indicates an expected call of GetGameByID.
func (mr *MockDatabaseMockRecorder) GetGameByID(ctx, gameID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGameByID", reflect.TypeOf((*MockDatabase)(nil).GetGameByID), ctx, gameID)
}

// PopEmptyGame mocks base method.
func (m *MockDatabase) PopEmptyGame(ctx context.Context, userID string) (*model.Game, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PopEmptyGame", ctx, userID)
	ret0, _ := ret[0].(*model.Game)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PopEmptyGame indicates an expected call of PopEmptyGame.
func (mr *MockDatabaseMockRecorder) PopEmptyGame(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PopEmptyGame", reflect.TypeOf((*MockDatabase)(nil).PopEmptyGame), ctx, userID)
}

// PutGame mocks base method.
func (m *MockDatabase) PutGame(ctx context.Context, game *model.Game) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutGame", ctx, game)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutGame indicates an expected call of PutGame.
func (mr *MockDatabaseMockRecorder) PutGame(ctx, game any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutGame", reflect.TypeOf((*MockDatabase)(nil).PutGame), ctx, game)
}

// MockAPI is a mock of API interface.
type MockAPI struct {
	ctrl     *gomock.Controller
	recorder *MockAPIMockRecorder
}

// MockAPIMockRecorder is the mock recorder for MockAPI.
type MockAPIMockRecorder struct {
	mock *MockAPI
}

// NewMockAPI creates a new mock instance.
func NewMockAPI(ctrl *gomock.Controller) *MockAPI {
	mock := &MockAPI{ctrl: ctrl}
	mock.recorder = &MockAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAPI) EXPECT() *MockAPIMockRecorder {
	return m.recorder
}

// GameStart mocks base method.
func (m *MockAPI) GameStart(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GameStart", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// GameStart indicates an expected call of GameStart.
func (mr *MockAPIMockRecorder) GameStart(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GameStart", reflect.TypeOf((*MockAPI)(nil).GameStart), c)
}

// GameStatus mocks base method.
func (m *MockAPI) GameStatus(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GameStatus", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// GameStatus indicates an expected call of GameStatus.
func (mr *MockAPIMockRecorder) GameStatus(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GameStatus", reflect.TypeOf((*MockAPI)(nil).GameStatus), c)
}

// PlayTurn mocks base method.
func (m *MockAPI) PlayTurn(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PlayTurn", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// PlayTurn indicates an expected call of PlayTurn.
func (mr *MockAPIMockRecorder) PlayTurn(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PlayTurn", reflect.TypeOf((*MockAPI)(nil).PlayTurn), c)
}
